---
name: BIX Docker

'on':
  push:
    branches:
      - master
    tags:
      - '*'

  pull_request:
    branches:
      - master
    types:
      - opened
      - synchronize
      - labeled
      - reopened

permissions:
  id-token: write
  contents: read
  packages: write

defaults:
  run:
    shell: bash

jobs:
  build-images:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          persist-credentials: false

      - name: Setup ASDF
        uses: ./.github/actions/setup-asdf

      - name: Setup environment variables
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          tag=$(bin/bix docker get-image-tag)
          image_tar="${{ runner.temp }}/bi_images.tar"
          artifact_name="bi-image-tar-${tag}"
          endpoint=$(printf \
            "/repos/{owner}/{repo}/actions/artifacts?name=%s" \
            "${artifact_name}"
          )
          # use gh tool and API to get existing artifact id
          artifact_id=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "${endpoint}" | jq '.artifacts[0].id'
          )
          artifact_missing='false'
          if [ "$artifact_id" == "null" ]; then
            artifact_missing='true'
          fi

          {
            echo "version=${tag}"
            echo "image_tar=${image_tar}"
            echo "artifact_missing=${artifact_missing}"
            # this will be overwritten if we upload a new artifact
            echo "artifact_id=${artifact_id}"
            echo "artifact_name=${artifact_name}"
            echo "save_and_upload=false"
          } >> "$GITHUB_ENV"

      - name: Determine if we need to save and upload
        if:
          ${{ (github.event_name == 'pull_request' &&
          contains(github.event.pull_request.labels.*.name, 'int-test')) ||
          (github.ref == 'refs/heads/master') || startsWith(github.ref,
          'refs/tags/') }}
        run: |
          [[ "${{ env.artifact_missing }}" == 'true' ]] && save_and_upload='true'
          echo "save_and_upload=${save_and_upload}" >> "$GITHUB_ENV"

      - name: Login to GHCR
        if: ${{ fromJSON(env.artifact_missing) }}
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure base images are present
        if: ${{ fromJSON(env.artifact_missing) }}
        run: bin/bix docker ensure-base-images

      - name: Build control-server image
        if: ${{ fromJSON(env.artifact_missing) }}
        run: bin/bix docker build-image control-server
      - name: Build home-base image
        if: ${{ fromJSON(env.artifact_missing) }}
        run: bin/bix docker build-image home-base
      - name: Build kube-bootstrap image
        if: ${{ fromJSON(env.artifact_missing) }}
        run: bin/bix docker build-image kube-bootstrap
      - name: Build pastebin image
        if: ${{ fromJSON(env.artifact_missing) }}
        run: bin/bix docker build-image pastebin

      - name: Save images
        if: ${{ fromJSON(env.save_and_upload) }}
        run: bin/bix docker save-images "${{ env.image_tar }}"

      - name: Upload image archive
        if: ${{ fromJSON(env.save_and_upload) }}
        id: upload-archive
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ env.artifact_name }}
          overwrite: true
          retention-days: 1
          if-no-files-found: error
          path: ${{ env.image_tar }}

      - name: Set artifact ID
        if: ${{ fromJSON(env.save_and_upload) }}
        env:
          new_artifact_id: ${{ steps.upload-archive.outputs.artifact-id }}
        run: echo "artifact_id=${{ env.new_artifact_id }}" >> "$GITHUB_ENV"
    outputs:
      bi-image-tar-artifact-id: ${{ env.artifact_id }}
      bi-image-tar-artifact-name: ${{ env.artifact_name }}
      version: ${{ env.version }}

  integration-tests:
    needs: build-images
    # run on PRs if labeled
    # always run on push to master or tag
    if:
      ${{ (github.event_name == 'pull_request' &&
      contains(github.event.pull_request.labels.*.name, 'int-test')) ||
      (github.ref == 'refs/heads/master') || startsWith(github.ref,
      'refs/tags/') }}
    uses: ./.github/workflows/int_test.yml
    secrets: inherit
    with:
      bi-image-artifact-id:
        ${{ needs.build-images.outputs.bi-image-tar-artifact-id }}
      bi-image-artifact-name:
        ${{ needs.build-images.outputs.bi-image-tar-artifact-name }}
      version: ${{ needs.build-images.outputs.version }}

  push-images:
    needs:
      - build-images
      - integration-tests
    # push images on tag or push to master
    if:
      ${{ (github.ref == 'refs/heads/master' || startsWith(github.ref,
      'refs/tags/')) && github.event_name == 'push' }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          persist-credentials: false

      - name: Login to GHCR
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Load pre-built images
        uses: ./.github/actions/restore-images
        with:
          file: bi_images.tar
          artifact-id:
            ${{ needs.build-images.outputs.bi-image-tar-artifact-id }}
          artifact-name:
            ${{ needs.build-images.outputs.bi-image-tar-artifact-name }}

      # set ADDITIONAL_TAGS to either latest or the current tag
      - if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo "ADDITIONAL_TAGS=latest" >> "$GITHUB_ENV"

      - if: ${{ startsWith(github.ref, 'refs/tags/') }}
        env:
          # Copy the refname into a env var
          # Github will sanitize the input to make sure that it
          # isn't malicious
          GH_REF_NAME: ${{ github.ref_name }}
        run: |
          echo "ADDITIONAL_TAGS=${GH_REF_NAME}" >> "$GITHUB_ENV"

      - name: Push to GHCR
        run: bin/bix docker push-images ${{ env.ADDITIONAL_TAGS }}
