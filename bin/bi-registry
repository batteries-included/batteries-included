#!/usr/bin/env bash

set -Eeuo pipefail

# Get where the current script is located
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)
# Get the root directory of the project
ROOT_DIR=$(cd "$SCRIPT_DIR/.." &>/dev/null && pwd -P)

source "${ROOT_DIR}/bin/lib/common-functions.sh"

pull_images() {
    SECONDS=0
    local imgs=("$@")
    # docker removes registry portion from dockerhub hosted images
    # so we won't find it and will try to re-pull below if we don't remove this
    local dockerio='docker.io/'
    local pull_count
    pull_count=0
    for img in "${imgs[@]}"; do
        if ! docker images "${img/$dockerio/}" --format=json | jq -e '.' &>/dev/null; then
            docker pull --quiet --platform linux/amd64 "$img"
            ((pull_count += 1))
        else
            log "Image ${img} already exists, skipping pull"
        fi
    done
    log "Finished pulling ${BLUE}${pull_count} / ${#imgs[@]}${NOFORMAT} images in ${SECONDS} seconds"
}

do_save_images() {
    local type="$1"
    local out="${2:-""}"
    [[ -z "${out:-""}" ]] && {
        log "${RED}Must pass an argument for the output tarball location${NOFORMAT}"
        exit 1
    }

    imgs=()
    if [[ "$type" == all || "$type" == registry_bootstrap ]]; then
        while read -r img tag; do
            case "$img" in
            docker.io/istio/*)
                imgs+=("${img}:${tag}")
                ;;
            ghcr.io/cloudnative-pg/*)
                imgs+=("${img}:${tag}")
                ;;
            quay.io/frrouting/*)
                imgs+=("${img}:${tag}")
                ;;
            quay.io/metallb/*)
                imgs+=("${img}:${tag}")
                ;;
            *)
                continue
                ;;
            esac
        done < <(do_list)
    fi

    if [[ "$type" == all || "$type" == bi ]]; then
        # add our images
        local version
        version=$(bi-docker get-image-tag)
        for img in kube-bootstrap control-server; do
            imgs+=("${REGISTRY}/${img}:${version}")
        done
    fi

    log "Found ${#imgs[@]} images to save"

    pull_images "${imgs[@]}"

    SECONDS=0
    docker save -o "${out}" "${imgs[@]}"
    log "Finished saving images to tar file in ${SECONDS} seconds"
}

do_list() {
    yq \
        '. | explode(.) | map_values([.name, .default_tag]) | to_entries | .[].value' \
        -o tsv "${ROOT_DIR}/image_registry.yaml" |
        column -t
}

do_create_pr() {
    bi_pushd "${ROOT_DIR}/registry-tool" || exit 1

    # While running the two registry tools turn off set -e
    set +e

    local update_exit_code=0
    log "Running registry updates"
    update_exit_code=$(
        go run registry-tool update-tags ../image_registry.yaml
        echo $?
    )
    local advance_exit_code=0
    log "Running registry advances"
    advance_exit_code=$(
        go run registry-tool advance-defaults ../image_registry.yaml
        echo $?
    )

    set -e

    if [[ $update_exit_code -ne 0 && $advance_exit_code -ne 0 ]]; then
        log "No changes to the registry, skipping PR creation"
        bi_popd
        return 0
    fi

    log "${GREEN}Formatting image_registry.yaml${NOFORMAT}"

    bi-source fmt yaml

    local title="chore(deps): Automated registry update [bi-registry-bot]"
    local message="This is an automated update of the image registry.
    Changes:
    "

    # Append to the message what was done
    # The final \n is always removed in printf
    if [[ $update_exit_code -eq 0 ]]; then
        message=$(printf "%s\n- Update image tags\n" "${message}")
    fi

    if [[ $advance_exit_code -eq 0 ]]; then
        message=$(printf "%s\n- Advance default tags\n" "${message}")
    fi

    local branch="bi-registry-bot/update-registry-$(date +%Y%m%d%H%M%S)"
    log "Committing changes to ${BLUE}image_registry.yaml${NOFORMAT} on branch ${branch}"
    git checkout -b "$branch"

    git add ../image_registry.yaml
    git -c user.name="bi-registry-bot" \
        -c user.email="elliott+registrybot@batteriesincl.com" \
        commit -m "${title}" -m "${message}" \
        --author "bi-registry-bot <elliott+registrybot@batteriesincl.com>"

    # If we are on Github actions then close all pull requests with label automation and registry
    if [[ -n "${GITHUB_JOB:-}" ]]; then
        log "Running in Github Actions, closing old pull requests with labels automation and registry"
        gh pr list --label "automation" --label "registry" --json number --jq '.[].number' | while read -r pr; do
            log "Closing pull request ${BLUE}${pr}${NOFORMAT}"
            gh pr close "$pr" --delete-branch -c "Closing in favor of new PR"
        done
    fi

    log "Creating pull request with title: ${BLUE}${title}${NOFORMAT}"
    git push origin "$branch"

    gh pr create --title "$title" \
        --body "${message}" \
        --label "int-test" \
        --label "automation" \
        --label "registry" \
        -B master \
        -H "$branch"

    bi_popd
}

usage() {
    cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-f] command [arg1...]

Available options:

-h, --help      Print this help and exit
-v, --verbose   Print script debug info

Available commands:

- list,ls                               List the images in the registry
- save-int-images                       Save the images necessary for integration testing
- save-bootstrap-images-from-registry   Save only the bootstrap images from the registry
- create-pr                             Create a pull request after updating the registry.
EOF
    exit 1
}

parse_params() {
    while :; do
        case "${1-}" in
        -h | --help) usage ;;
        -v | --verbose) export TRACE=1 ;;
        --no-color) export NO_COLOR=1 ;;
        -?*) die "Unknown option: $1" ;;
        *) break ;;
        esac
        shift
    done

    if [[ $# -lt 1 ]]; then
        log "Missing script arguments"
        usage
    fi

    command="$1"
    shift
    args=("$@")

    return 0
}

parse_params "$@"
setup_colors
setup_trace
setup_root
maybe_add_to_path "${ROOT_DIR}/bin"
export PATH

case "$command" in
list | ls)
    do_list
    ;;
save-int-images)
    do_save_images all "${args[@]}"
    ;;
save-bootstrap-images-from-registry)
    do_save_images registry_bootstrap "${args[@]}"
    ;;
create-pr)
    do_create_pr "${args[@]}"
    ;;
*)
    usage
    ;;
esac
