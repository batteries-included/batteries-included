#!/usr/bin/env bash

set -Eeuo pipefail

# Get where the current script is located
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)
# Get the root directory of the project
ROOT_DIR=$(cd "$SCRIPT_DIR/.." &>/dev/null && pwd -P)

source "${ROOT_DIR}/bin/common-functions.sh"

PORTFORWARD_ENABLED=1

# If you are changing this also change the
# version in mix.exs for all the apps in platform_umbrella
BASE_VERSION="0.57.0"

# Make sure everything is build with this binary in the path
export PATH="${ROOT_DIR}/bin:${PATH}"

cleanup() {
    trap - SIGINT SIGTERM ERR EXIT

    # We can end up in cleaup from a few different places and colors might not be set
    safe_colors

    local jobs
    jobs=$(jobs -pr)

    for job in $jobs; do
        for child in $(pgrep -P "${job}"); do
            for grandchild in $(pgrep -P "${child}"); do
                for great in $(pgrep -P "${grandchild}"); do
                    log "Killing greatgrandchild ${ORANGE}$great${NOFORMAT}"
                    term_kill "$great"
                    kill -9 "$great" || true
                done
                log "Killing grandchild ${ORANGE}$grandchild${NOFORMAT}"
                term_kill "$grandchild"
            done
            log "Killing child ${ORANGE}$child${NOFORMAT}"
            term_kill "$child"
        done
        log "Killing job ${ORANGE}$job${NOFORMAT}"
        term_kill "$job"
    done

    # Cleanup the bi build directory
    clean_bi_build
}

trap cleanup SIGINT SIGTERM ERR EXIT

usage() {
    cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-f] command [arg1...]

Available options:

-h, --help      Print this help and exit
-v, --verbose   Print script debug info

Available commands:

**Install Related Commands**
- start             Start a new installation
- stop              Stop a running installation
- bootstrap         Bootstrap a new installation

**Phoenix Related Commands**
- dev               Start a development environment with iex
- phx-server        Start a phoenix server

**Source Commands**
- fmt               Format all code in the project
- check-fmt         Check if all code in the project is formatted
- gen-static-specs  Generate static installation specs
- print-jwk-json    Print the JWK key given a path as JSON for use in a secret
- set-version       Change the version of the project in mix.exs and bin/bix

**Go Commands**
- bi                Run the bi binary
- go-build-bi       Build the bi binary
- go-test           Run go tests
- go-test-int       Run go integration tests
- go-update-deps    Update go dependencies
- go-clean-build    Clean the temporary BI build directory

**Elixir Commands**
- ex-test-deep      Run all tests with coverage and reset the database
- ex-test           Run all tests
- ex-lint           Run all linters (dialexir, credo, format)
- ex-credo          Run credo linter
- ex-dialyzer       Run dialyzer linter

**Docker Commands**
- build-image       Build a docker image
- push-images       Push all the container images to a registry


**Static Site Commands**
- static-dev       Start a development environment with npm
- static-bulid     Build the static site
EOF
    exit 1
}

update_go_deps() {
    local go_path=${1}
    bi_pushd "${go_path}"
    log "${GREEN}Updating go dependencies${NOFORMAT} in ${go_path}"
    go get -u ./... >/dev/null
    go mod tidy >/dev/null
    popd
}

run_go_test() {
    local go_path=${1}
    bi_pushd "${go_path}"
    log "${BLUE}Running go tests${NOFORMAT} in ${go_path}"
    gofmt -s -l -e .
    go vet ${TRACE:+-v} ./...
    # If trace run tests with --race -v
    # Otherwise just run the tests
    go test ${TRACE:+--race -v} ./...
    bi_popd
}

try_portforward() {
    local slug=${1:-"dev"}
    local counter=0
    local lock_dir="${ROOT_DIR}/.flock/"
    local lock_file="${lock_dir}/portforward.lockfile"

    mkdir -p "${lock_dir}"

    # Loop forever if PORTFORWARD_ENABLED is set to 1
    # Skip the loop if PORTFORWARD_ENABLED is set to 0

    while [ ${PORTFORWARD_ENABLED} -eq 1 ]; do
        if ! flock -x -n "${lock_file}" "${SCRIPT_DIR}/pg-forward" "${slug}"; then
            log "Port forward failed, retrying..."
            counter=$((counter + 1))

            local sleep_time
            if [[ $((counter * 2)) -gt 20 ]]; then
                sleep_time=20
            else
                sleep_time=$((counter * 2))
            fi
            sleep "${sleep_time}"
        fi
    done
}

## Stop a running installation
# Will take in either a spec file or a slug
do_stop() {
    local input=${1:-"bootstrap/dev.spec.json"}
    local slug
    # If install path is a file then we need to get the slug
    # from the file
    if [[ -f ${input} ]]; then
        input=$(realpath "${input}")
        slug=$(get_slug "${input}")
    else
        # Otherwise we can just stop the install path assuming it's a slug already
        slug=${input}
    fi
    log "${YELLOW}Stopping${NOFORMAT} $slug"
    run_bi stop ${TRACE:+-v=debug} "$slug"
}

## Start a new installation
do_start() {
    local spec_path=${1:-"bootstrap/dev.spec.json"}
    # If spec path isn't a file fail out
    if [[ ! -f ${spec_path} ]]; then
        die "Spec file not found: ${spec_path}"
    fi

    spec_path=$(realpath "${spec_path}")
    log "${GREEN}Starting${NOFORMAT} ${CYAN}${spec_path}${NOFORMAT}"
    run_bi start ${TRACE:+-v=debug} "${spec_path}"
}

do_bootstrap() {
    local spec_path=${1:-"bootstrap/dev.spec.json"}
    local summary_path slug
    local out=/dev/null
    if [[ $TRACE -eq 1 ]]; then
        out=/dev/stdout
    fi
    spec_path=$(realpath "${spec_path}")

    do_start "${spec_path}" >/dev/null
    slug=$(get_slug "${spec_path}")
    log "${GREEN}Started Successfully${NOFORMAT} ${CYAN}${spec_path}${CYAN} is ${BLUE}${slug}${NOFORMAT}"

    # Here we reach into the internals of `bi`. When we start an installation
    # there are resources that are calcuated. We need to know what those are
    # So rather than use the install spec we use the spec from the installation.
    #
    # Usually this would be handled by reading the configmap in the kube bootstrap container.
    summary_path=$(get_summary_path "${slug}")

    # bootstrap_path is the full absolute path to the folder containing the spec file
    bootstrap_path=$(dirname "${spec_path}")

    # make sure we're always pointing at the correct cluster
    KUBE_CONFIG_FILE="$(run_bi debug kube-config-path "${slug}")"
    export KUBE_CONFIG_FILE

    log "${GREEN}Running Kube Bootstrap${NOFORMAT} for ${BLUE}${slug}${NOFORMAT}"

    run_mix "do" deps.get, compile, kube.bootstrap "${summary_path}" >"$out"
    # Start the port forwarder
    try_portforward "${slug}" &

    portforward_pid=$!
    log "${GREEN}Port Forwarding${NOFORMAT} for ${BLUE}${slug}${NOFORMAT} with pid ${ORANGE}${portforward_pid}${NOFORMAT}"

    # Postgres should be up create the database and run the migrations
    log "${GREEN}Running migrations${NOFORMAT} for ${BLUE}${slug}${NOFORMAT}"
    run_mix setup >"$out"
    # Add the rows that should be there for what's installed
    run_mix "do" seed.control "${summary_path}", \
        seed.home "${bootstrap_path}" >"$out"

    log "${GREEN}Bootstrap Exited Successfully${NOFORMAT}"
    exit 0
}

do_dev() {
    log "${GREEN}Starting Development Environment${NOFORMAT}"
    try_portforward dev &

    portforward_pid=$!
    log "${GREEN}Port Forwarding${NOFORMAT} for ${BLUE}dev${NOFORMAT} with pid ${ORANGE}${portforward_pid}${NOFORMAT}"
    bi_pushd "${ROOT_DIR}/platform_umbrella"

    KUBE_CONFIG_FILE=$(run_bi debug kube-config-path dev) iex -S mix phx.server
    bi_popd
}

do_phx_server() {
    log "${GREEN}Starting Phoenix Server${NOFORMAT}"
    run_mix "phx.server"
}

format_mix_code() {
    local path=${1}
    bi_pushd "${path}"
    log "Formatting elixir code in ${BLUE}${path}${NOFORMAT}"
    run_mix "do" deps.get, format >/dev/null
    bi_popd

}

# Some code needs prettier so we use static's install
format_prettier_code() {
    log "Formatting all ${BLUE}yml|yaml|ts|js${NOFORMAT} files with prettier"
    # Run prettier on all the files from inside of static.
    # This seems to keep prettier happy and not complain about astro-plugin
    bi_pushd "${ROOT_DIR}/static"
    npm ci >/dev/null

    # we have to do this
    FILES=()
    for file in $(git ls-files '../*.yaml' '../*.yml' '../*.ts' '../*.js' '../README.md' '../platform_umbrella/apps/home_base_web/priv/markdown/*.md'); do
        FILES+=("${file}")
    done

    npx prettier --write "${FILES[@]}" >/dev/null

    bi_popd
}

check_format_prettier_code() {
    log "Checking all ${BLUE}yml|yaml|ts|js${NOFORMAT} files with prettier"
    bi_pushd "${ROOT_DIR}/static"
    npm ci >/dev/null
    FILES=()
    for file in $(git ls-files '../*.yaml' '../*.yml' '../*.ts' '../*.js' '../README.md' '../platform_umbrella/apps/home_base_web/priv/markdown/*.md'); do
        FILES+=("${file}")
    done
    npx prettier --check "${FILES[@]}" >/dev/null
    bi_popd
}

format_sh_code() {
    log "Formatting all ${BLUE}sh${NOFORMAT} files with shfmt"
    shfmt -w -i 4 "${ROOT_DIR}/bin" "${ROOT_DIR}/platform_umbrella/rel/overlays/bin/"
    FILES=()
    for file in $(git ls-files '*.sh'); do
        FILES+=("${file}")
    done

    shfmt -w -i 4 "${FILES[@]}"
}

check_format_sh_code() {
    log "Checking all ${BLUE}sh${NOFORMAT} files with shfmt"
    shfmt -d -i 4 "${ROOT_DIR}/bin" "${ROOT_DIR}/platform_umbrella/rel/overlays/bin/"
    FILES=()
    for file in $(git ls-files '*.sh'); do
        FILES+=("${file}")
    done
    shfmt -d -i 4 "${FILES[@]}"
}

check_format_mix_code() {
    local path=${1}
    bi_pushd "${path}"
    log "Checking elixir code in ${BLUE}${path}${NOFORMAT}"
    run_mix "do" deps.get, format --check-formatted >/dev/null
    bi_popd
}

format_go_code() {
    local path=${1}
    bi_pushd "${path}"
    log "Formatting golang code in ${BLUE}${path}${NOFORMAT}"
    gofmt -s -w . >/dev/null
    bi_popd
}

check_format_go_code() {
    local path=${1}
    bi_pushd "${path}"
    log "Checking golang code in ${BLUE}${path}${NOFORMAT}"
    gofmt -l -d .
    bi_popd
}

format_npm_code() {
    local path=${1}
    bi_pushd "${path}"
    log "Formatting npm code in ${BLUE}${path}${NOFORMAT}"
    npm ci >/dev/null
    npx prettier --write . >/dev/null
    bi_popd
}

check_format_npm_code() {
    local path=${1}
    bi_pushd "${path}"
    log "Checking npm code in ${BLUE}${path}${NOFORMAT}"
    npm ci >/dev/null
    npx prettier --check . >/dev/null
    bi_popd
}

do_fmt() {
    format_mix_code "platform_umbrella"
    format_go_code "bi"
    format_go_code "pastebin-go"
    format_npm_code "static"
    format_prettier_code
    format_sh_code
}

do_check_fmt() {
    check_format_mix_code "platform_umbrella"
    check_format_go_code "bi"
    check_format_go_code "pastebin-go"
    check_format_npm_code "static"
    check_format_prettier_code
    check_format_sh_code
}

do_gen_static_specs() {
    rm -rf "${ROOT_DIR}/bootstrap/*.{spec,install}.json"
    # VERSION_OVERRIDE generates different bytecode for
    # the current version. We don't want that to be left
    # around for developers. It makes tests fail.
    run_mix clean
    VERSION_OVERRIDE=''${VERSION_OVERRIDE:-"latest"} \
        run_mix "do" deps.get, compile --force, \
        gen.static.installations "${ROOT_DIR}/bootstrap"

    # Done
    log "Generated static specs in ${BLUE}${ROOT_DIR}/bootstrap${NOFORMAT}"
    run_mix clean
}

do_print_jwk_json() {
    local path=${1}
    local absolute_path

    # bix jumps to the root of the project on startup
    #
    # If the file doesn't exist then assume that
    # the user passed in a relative path and try to find it
    # relative to where the user was when they called bix.
    #
    if [ ! -f "${path}" ]; then
        path="${CURRENT_DIR}/${path}"
    fi

    # If we still can't find the file then fail out
    if [ ! -f "${path}" ]; then
        die "File not found: ${path}"
    fi

    absolute_path=$(readlink -f "${path}")

    log "${GREEN}Printing JWK key${NOFORMAT} from ${absolute_path}"
    run_mix jwk.pem.json "${absolute_path}"
}

do_set_version() {
    local new_version=${1}
    local old_version="${BASE_VERSION}"

    log "Changing version from ${old_version} to ${new_version}"
    all_mix_files=($(find "${ROOT_DIR}/platform_umbrella" -name mix.exs))
    # Change the version in the mix.exs files
    for mix_file in "${all_mix_files[@]}"; do
        sed -i.bak "s/${old_version}/${new_version}/g" "${mix_file}"
        rm "${mix_file}.bak"
    done

    # Change the version in the bin/bix file
    sed -i.bak "s/BASE_VERSION=\"${old_version}\"/BASE_VERSION=\"${new_version}\"/g" "${ROOT_DIR}/bin/bix"
    rm "${ROOT_DIR}/bin/bix.bak"

    run_mix clean
    log "Version changed to ${GREEN}${new_version}${NOFORMAT}"
}

do_go_update_deps() {
    update_go_deps "${ROOT_DIR}/bi"
    update_go_deps "${ROOT_DIR}/pastebin-go"
}

do_go_test() {
    run_go_test "${ROOT_DIR}/bi"
}

do_go_test_int() {
    export INTEGRATION=true
    run_go_test "${ROOT_DIR}/bi"
}

do_clean_build() {
    log "${GREEN}Cleaning${NOFORMAT} the temporary BI build directory"
    clean_bi_build
}

do_build_image() {
    local image_name=${1:-"control-server"}
    local version

    # Pre-create the  version for all docker build
    version="${BASE_VERSION}-$(version_tag)"
    if [ -n "${VERSION_OVERRIDE:-""}" ]; then
        version="$VERSION_OVERRIDE"
    fi

    log "${GREEN}Building${NOFORMAT} container image ${image_name} with  version ${version}"

    declare -a cache_args
    if [ "${GITHUB_ACTIONS:-""}" = "true" ]; then
        cache_args+=(--cache-from
            "type=gha,url=$ACTIONS_CACHE_URL,token=$ACTIONS_RUNTIME_TOKEN,scope=$image_name"
            --cache-to
            "type=gha,mode=max,url=$ACTIONS_CACHE_URL,token=$ACTIONS_RUNTIME_TOKEN,scope=$image_name"
            --builder=container)
    fi

    case "${image_name}" in
    control-server)
        docker buildx build . -f docker/platform.dockerfile \
            --load \
            -t "control-server:${version}" \
            --build-arg RELEASE=control_server \
            "${cache_args[@]}"
        ;;
    home-base)
        docker buildx build . -f docker/platform.dockerfile \
            --load \
            -t "home-base:${version}" \
            --build-arg RELEASE=home_base \
            "${cache_args[@]}"
        ;;

    kube-bootstrap)
        docker buildx build . -f docker/platform.dockerfile \
            --load \
            -t "kube-bootstrap:${version}" \
            --build-arg RELEASE=kube_bootstrap \
            "${cache_args[@]}"
        ;;

    pastebin)
        docker buildx build . -f docker/pastebin.dockerfile \
            --load \
            -t "pastebin:${version}" \
            "${cache_args[@]}"
        ;;
    *)
        die "Unknown image name: ${image_name} not in expected list control-server, home-base, kube-bootstrap, pastebin"
        ;;
    esac
}

do_push_images() {
    tag_push "control-server" "$@"
    tag_push "home-base" "$@"
    tag_push "kube-bootstrap" "$@"
    tag_push "pastebin" "$@"
}

do_static_dev() {
    log "${GREEN}Starting Development Environment${NOFORMAT}"
    bi_pushd "${ROOT_DIR}/static"
    npm install >/dev/null
    npm run dev
    bi_popd
}

do_static_build() {
    log "${GREEN}Building Static Site${NOFORMAT}"
    bi_pushd "${ROOT_DIR}/static"
    npm clean-install >/dev/null
    npm run build
    bi_popd
}

tag_push() {
    local image_name=${1}
    shift
    local registry=${1:-"localhost:5000"}
    shift
    local additional_tags=("$@")

    local version
    version="${BASE_VERSION}-$(version_tag)"
    if [ -n "${VERSION_OVERRIDE:-""}" ]; then
        version="$VERSION_OVERRIDE"
    fi

    log "${GREEN}Pushing${NOFORMAT} ${image_name}:${version} to ${registry}"

    docker tag "${image_name}:${version}" "${registry}/${image_name}:${version}"
    docker push "${registry}/${image_name}:${version}"

    for tag in "${additional_tags[@]}"; do
        log "${GREEN}Tagging${NOFORMAT} ${image_name}:${version} as ${tag}"
        docker tag "${image_name}:${version}" "${registry}/${image_name}:${tag}"
        docker push "${registry}/${image_name}:${tag}"
    done
}

do_ex_test_deep() {
    local slug=${1:-"dev"}
    log "${GREEN}Running${NOFORMAT} elixir tests with coverage and resetting the database"
    # Start the port forwarder
    try_portforward "${slug}" &

    export MIX_ENV=test
    run_mix "do" deps.get, compile --warnings-as-errors >/dev/null
    run_mix compile --warnings-as-errors >/dev/null
    run_mix ecto.reset >/dev/null
    run_mix test --trace --slowest 10 --cover --export-coverage default --warnings-as-errors --all-warnings
    run_mix test.coverage
    log "Elixir tests ${GREEN}Passed${NOFORMAT}"
}

do_ex_test() {
    local slug=${1:-"dev"}
    local out=/dev/null
    if [[ $TRACE -eq 1 ]]; then
        out=/dev/stdout
    fi

    log "${GREEN}Running${NOFORMAT} elixir tests"
    # Start the port forwarder
    try_portforward "${slug}" &

    export MIX_ENV=test

    run_mix test ${TRACE:+--trace} --warnings-as-errors --all-warnings >$out
    log "Elixir tests ${GREEN}Passed${NOFORMAT}"
}

do_ex_lint() {
    log "${GREEN}Running${NOFORMAT} elixir linters"
    run_mix "do" deps.get, compile --warnings-as-errors >/dev/null
    run_mix credo
    run_mix dialyzer
    run_mix format --check-formatted
    log "Elixir lint ${GREEN}Passed${NOFORMAT}"
}

do_ex_credo() {
    log "${GREEN}Running${NOFORMAT} credo linter"
    run_mix "do" deps.get, compile --warnings-as-errors >/dev/null
    run_mix credo
    log "Credo lint ${GREEN}Passed${NOFORMAT}"
}

do_ex_dialyzer() {
    log "${GREEN}Running${NOFORMAT} dialyzer linter"
    run_mix "do" deps.get, compile --warnings-as-errors >/dev/null
    run_mix dialyzer
    log "Dialyzer lint ${GREEN}Passed${NOFORMAT}"
}

do_go_build_bi() {
    goreleaser release --clean --snapshot ${TRACE:+--verbose} -p 1
}

do_bi_location() {
    bi_bin_location
}

do_version_tag() {
    version_tag
}

do_ensure_bi() {
    local bin_path
    bin_path=$(bi_bin_location)

    if [ ! -f "${bin_path}" ]; then
        log "bi binary not found at ${bin_path} building..."
        build_bi
    else
        log "bi binary found at ${bin_path}"
    fi
}

do_bi() {
    local args=("$@")
    local bin_path
    log "Running bi with args: ${args[*]}"
    run_bi "${args[@]}"
}

parse_params() {
    while :; do
        case "${1-}" in
        -h | --help) usage ;;
        -v | --verbose) TRACE=1 ;;
        --no-color) NO_COLOR=1 ;;
        --no-forward) PORTFORWARD_ENABLED=0 ;;
        -?*) die "Unknown option: $1" ;;
        *) break ;;
        esac
        shift
    done

    if [[ $# -lt 1 ]]; then
        log "Missing script arguments"
        usage
    fi

    command="$1"
    shift
    args=("$@")

    return 0
}

parse_params "$@"
setup_colors
setup_trace
setup_root

case "$command" in
fmt)
    do_fmt
    ;;
check-fmt)
    do_check_fmt
    ;;
start)
    do_start "${args[@]}"
    ;;
stop)
    do_stop "${args[@]}"
    ;;
gen-static-specs)
    do_gen_static_specs
    ;;
print-jwk-json)
    do_print_jwk_json "${args[@]}"
    ;;
set-version)
    do_set_version "${args[@]}"
    ;;
bootstrap)
    do_bootstrap "${args[@]}"
    ;;
dev)
    do_dev "${args[@]}"
    ;;
phx-server)
    do_phx_server
    ;;
bi)
    do_bi "${args[@]}"
    ;;
go-update-deps)
    do_go_update_deps
    ;;
go-test)
    do_go_test
    ;;
go-test-int)
    do_go_test_int
    ;;
go-clean-build)
    do_clean_build
    ;;
go-ensure-bi)
    do_ensure_bi
    ;;
go-build-bi)
    do_go_build_bi
    ;;
bi-location)
    do_bi_location
    ;;
ex-test-deep)
    do_ex_test_deep "${args[@]}"
    ;;
ex-test)
    do_ex_test "${args[@]}"
    ;;
ex-lint)
    do_ex_lint
    ;;
ex-credo)
    do_ex_credo
    ;;
ex-dialyzer)
    do_ex_dialyzer
    ;;
build-image)
    do_build_image "${args[@]}"
    ;;
push-images)
    do_push_images "${args[@]}"
    ;;
version-tag)
    do_version_tag
    ;;
static-dev)
    do_static_dev
    ;;
root-dir)
    echo "${ROOT_DIR}"
    ;;
*)
    usage
    ;;
esac
