---
import CopyIcon from '../icons/CopyIcon.astro';
import CheckSolidIcon from '../icons/CheckSolidIcon.astro';
import ExternalLinkIcon from '../icons/ExternalLinkIcon.astro';

export interface Props {
  id?: string;
  class?: string;
  src: string;
  linkUrl?: string;
  linkUrlText?: string;
  template?: string;
}

const {
  id = `script-${Math.random().toString(36).slice(2, 11)}`,
  class: className = '',
  src,
  linkUrl,
  linkUrlText = 'Open script source',
  template = '/bin/bash -c "$(curl -fsSL @src)"',
  ...props
} = Astro.props;

const scriptCommand = template.replace('@src', src);
---

<div
  class={`relative flex items-center rounded-lg overflow-hidden h-14 bg-slate-800 text-white text-lg tracking-tighter font-mono font-bold ${className}`}
  {...props}>
  <div class="relative flex-1 h-full">
    <div
      class="flex items-center absolute inset-0 whitespace-nowrap overflow-auto px-5">
      <pre id={id}>{scriptCommand}</pre>
    </div>
  </div>

  <button
    id={`${id}-clipboard`}
    class="flex items-center justify-center size-14 bg-slate-800 border-l border-l-slate-600 hover:bg-slate-700 transition-colors text-white"
    data-text={scriptCommand}
    aria-label="Copy script to clipboard"
    title="Copy to clipboard">
    <CopyIcon class="size-6 copy-icon" />
    <CheckSolidIcon class="size-6 text-green-400 hidden check-icon" />
  </button>

  <a
    id={`${id}-open`}
    class="flex items-center justify-center size-14 bg-slate-800 border-l border-l-slate-600 hover:bg-slate-700 transition-colors text-white"
    href={linkUrl || src}
    target="_blank"
    rel="noopener noreferrer"
    title={linkUrlText}>
    <ExternalLinkIcon class="size-6" />
  </a>
</div>

<script>
  // Client-side clipboard functionality
  document.addEventListener('DOMContentLoaded', function () {
    function copyToClipboard(button) {
      const text = button.getAttribute('data-text');
      if (!text) return;

      navigator.clipboard
        .writeText(text)
        .then(() => {
          const copyIcon = button.querySelector('.copy-icon');
          const checkIcon = button.querySelector('.check-icon');

          if (copyIcon && checkIcon) {
            copyIcon.classList.add('hidden');
            checkIcon.classList.remove('hidden');

            setTimeout(() => {
              copyIcon.classList.remove('hidden');
              checkIcon.classList.add('hidden');
            }, 2000);
          }
        })
        .catch((err) => {
          console.error('Failed to copy text: ', err);
          // Fallback for older browsers
          const textArea = document.createElement('textarea');
          textArea.value = text;
          document.body.appendChild(textArea);
          textArea.select();
          try {
            document.execCommand('copy');
            const copyIcon = button.querySelector('.copy-icon');
            const checkIcon = button.querySelector('.check-icon');

            if (copyIcon && checkIcon) {
              copyIcon.classList.add('hidden');
              checkIcon.classList.remove('hidden');

              setTimeout(() => {
                copyIcon.classList.remove('hidden');
                checkIcon.classList.add('hidden');
              }, 2000);
            }
          } catch (fallbackErr) {
            console.error('Fallback copy failed: ', fallbackErr);
          }
          document.body.removeChild(textArea);
        });
    }

    // Attach event listeners to all copy buttons
    document.querySelectorAll('[id$="-clipboard"]').forEach((button) => {
      button.addEventListener('click', function () {
        copyToClipboard(this);
      });
    });
  });
</script>
