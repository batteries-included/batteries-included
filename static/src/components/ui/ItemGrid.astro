---
import { twMerge } from 'tailwind-merge';
import type { ItemGrid } from '~/types';
import Button from './Button.astro';
import IconFactory from '../widgets/IconFactory.astro';

const {
  items = [],
  columns,
  defaultIcon = '',
  classes = {},
} = Astro.props as ItemGrid;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  action: actionClass = '',
} = classes;
---

{
  items && (
    <div
      class={twMerge(
        `grid mx-auto gap-8 mt-8 md:mt-12 md:gap-y-12 ${
          columns === 4
            ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
            : columns === 3
              ? 'lg:grid-cols-3 sm:grid-cols-2'
              : columns === 2
                ? 'sm:grid-cols-2 '
                : ''
        }`,
        containerClass
      )}>
      {items.map(
        ({
          title,
          description,
          icon,
          callToAction,
          classes: itemClasses = {},
        }) => (
          <div class="border p-8 rounded-xl bg-white border-[#DADADA]">
            <div class={twMerge('max-w-md', panelClass, itemClasses?.panel)}>
              <div class="flex items-center gap-x-4">
                {(icon || defaultIcon) && (
                  <IconFactory
                    classes="text-primary w-9 h-9"
                    icon={icon || defaultIcon}
                  />
                )}
                {title && (
                  <h3
                    class={twMerge(
                      'text-lg lg:text-xl xl:text-2xl font-bold',
                      titleClass,
                      itemClasses?.title
                    )}>
                    {title}
                  </h3>
                )}
              </div>
              {description && (
                <p
                  class={twMerge(
                    `${title ? 'mt-4 lg:mt-6' : ''} text-muted`,
                    descriptionClass,
                    itemClasses?.description
                  )}
                  set:html={description}
                />
              )}
              {callToAction && (
                <div
                  class={twMerge(
                    `${title || description ? 'mt-3' : ''}`,
                    actionClass,
                    itemClasses?.actionClass
                  )}>
                  <Button variant="link" {...callToAction} />
                </div>
              )}
            </div>
          </div>
        )
      )}
    </div>
  )
}
